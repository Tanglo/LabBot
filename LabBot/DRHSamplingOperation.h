//
//  DRHSamplingOperation.h
//  LabBot
//
//  Created by Lee Walsh on 13/01/2015.
//  Copyright (c) 2014 Lee David Walsh. All rights reserved.
//  This sofware is licensed under the The MIT License (MIT)
//  See: https://github.com/Tanglo/LabBot/blob/master/LICENSE.md
//

#import <Foundation/Foundation.h>

/*!
 @brief A protocol that defines which methods a class must implement to receive data from a @c DRHSamplingOperation.
 
 Classes that will act as the @c dataRecipient of a @c DRHSamplingOperation must implement this protocol.
 
 */
@protocol DRHSamplingOperationRecipient

/*!
 * This method will be called by an instance of a @c DRHSamplingOperation everytime data is streamed from a @c DRHDaqDevice.  This method receives an array containing the most recently streamed data.
 * @param newData This array contains the streamed data.  The format of the data within this array is determined by the @c readStreamData method of the @c DRHDaqDevice subclass that read the data from the hardware.
 */
-(void)receiveData:(NSArray *)newData;

@end

@class DRHDaqDevice;

/*!
 @brief A class for managing concurrent sampling of data from a DAQ device.
 
 This class is a subclass of @c NSOperation and is intended to be run concurrently.  Generally when streaming data continusouly the user will want it done on a separate thread so that it is not interupted by, or dependent on, user input to the rest of the application.  This class interfaces with a DAQ device and manages the concurrent sampling.  @c DRHSamplingOperation overrides  @c main, @c start and @c completeOperation from the @c NSOperation class and sets the priority of its @c NSThread as 0.75 so that sampling priority is higher than most applications.
 
 As a subclass of @c NSOperation this class overrides @c main (see Apple's @c NSOperation documentation for deatil). The @c main method of @c DRHSamplingOperation checks if the operation has been cancelled and if so it calls the @c completeOperation method to finalise the samplingOperation.  If the samplingOperation has not been cancelled it simply calls the @c readData method.  This @c readData method simply does the following:
    @code
    NSArray *newData = [daqDevice readStreamData];
    [dataRecipient receiveData:newData];
    @endcode
 With just simple data collection @c DRHSamplingOperation can be used as is.  If you want more complex data handling you can subclass @c DRHSamplingOperation and override the @c readData method without necessarily needing to override @c main.  A @c completeOperation method is also implemented to do the following:
    @code
     [self willChangeValueForKey:@"isFinished"];
     [self willChangeValueForKey:@"isExecuting"];
     executing = NO;
     finished = YES;
     [daqDevice stopStream];
     [self didChangeValueForKey:@"isExecuting"];
     [self didChangeValueForKey:@"isFinished"];
    @endcode
 If you need to do other cleaning up after sampling to stopped you should subclass and override @c completeOperation.
 
 To use this class you will need to initialise it with a @c daqDevice and a @c dataRecipient.  Then you must separately configure the DAQ device and ensure that the dataRecipient has a method with the definition @c -(void)receiveData:(NSArray *)newData to handle the sampled data generated by the @c daqDevice object's @c readStreamData method.  The @c DRHSamplingOperation is started by calling the @c start method and stopped by sending it a @c cancel message.  For example if @c myDaqDevice is an instance of a @c DRHDaqDevice subclass and @c dataStorage will receive the data:
 
    @code
    //Create a new sampling operation and start it
    DRHSamplingOperation mySamplingOp = [DRHSamplingOperation samplingOperationWith: myDaqDevice And:dataStorage];
    [mySamplingOp start];
 
    //Wait for sampling work to complete...
 
    //Stop sampling
    [mySampling cancel];
 
    //This sampling operation is finished and can't be started again.
    @endcode
 
 */
@interface DRHSamplingOperation : NSOperation {
    ///@brief Stores the exectuion state of the receiver.  Initiated as @c NO and should be set to @c YES by the receiver's @c start method.  It should be set to @c NO by any of the receiver's methods that stop the receiver from exectuting.
    BOOL executing;
    ///@brief Stores the finished state of the receiver.  Initiated as @c NO and should be set to @c YES once the receiver's work is done.  Generally this will be once sampling session is completed.
    BOOL finished;
    
    ///@brief A hardware device that will be used for the sampling.  This device is set during initialisation and should not be changed.  By default no cofiguration of the DAQ device is performed by @c DRHSamplingOperation.
    DRHDaqDevice *daqDevice;
    ///@brief The object that will receive the data sampled by this samplingOperation.  The @c dataRecipient must be an instance of a class that conforms to the @c DRHSamplingOperationRecipient protocol.
    id <DRHSamplingOperationRecipient> dataRecipient;
}

/*!
 * Initialises an existing @c DRHSamplingOperation object with a daqDevice and a dataRecipient.
 * @param newDaqDevice An exisitng and initialised @c DRHDaqDevice object that represents a configured hardware device that will be used for sampling.
 * @param newDataRecipient The object that will receive the data that is streamed from the daqDevice.  The @c dataRecipient object's @c receiveData: method will be called each time new data is streamed from the daqDevice.
 * @return @c An initialised @c DRHSamplingOperation.
 */
-(DRHSamplingOperation *)initSamplingOperationWith:(DRHDaqDevice *)newDaqDevice And:(id)newDataRecipient;

/*!
 * Creates and initialises an existing @c DRHSamplingOperation object with a daqDevice and a dataRecipient.
 * @param newDaqDevice An exisitng and initialised @c DRHDaqDevice object that represents a configured hardware device that will be used for sampling.
 * @param newDataRecipient The object that will receive the data that is streamed from the daqDevice.  The @c dataRecipient object's @c receiveData: method will be called each time new data is streamed from the daqDevice.
 * @return @c A new and initialised @c DRHSamplingOperation.
 */
+(DRHSamplingOperation *)samplingOperationWith:(DRHDaqDevice *)newDaqDevice And:(id)newDataRecipient;

/*!
 * Calling this method still start your samplingOperation.
 */
-(void)start;

/*!
 * Calling this method will stop your samplingOperation.  Once stopped it cannot be restarted you need to create a new samplingOperation.
 */
-(void)cancel;

@end
